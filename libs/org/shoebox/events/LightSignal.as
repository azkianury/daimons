/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.events {	import org.shoebox.utils.logger.Logger;	import flash.errors.IllegalOperationError;	/**	* The <code>LightSignal</code> is an alternative to the native <code>Event</code> system	* 	* org.shoebox.events.LightSignal	* @author shoebox	*/	public class LightSignal {				protected static var __instance	:LightSignal = null;				protected var _vLISTENERS		:Vector.<LightSignalItem>;				// -------o constructor					/** 			* Constructor of the LightSignal class			*			* @public			* @param	e : singleton enforcer object ( SingletonEnforcer )			* @return	void			*/			public function LightSignal( e : SingletonEnforcer ) : void {				dispose();			}		// -------o public						/**			* Connect the function to the speficied channel name			* 			* @public			* @param	sNAME 	: Signal channel name	(String) 			* @param	oFUNC		: Reference function	(Function)			* @param	bONESHOT	: If true, the listener will fired only one time (Boolea)			* @return	void			*/			public function connect( sNAME : String , oFUNC : Function , bONESHOT : Boolean = false ) : void {				trc('connect ::: '+sNAME);				//					if(_findConnected( sNAME , oFUNC ) !== null)						throw new IllegalOperationError('Signal with this function & name is already registered');										//					_vLISTENERS.push( new LightSignalItem( sNAME , oFUNC , bONESHOT ));													}						/**			* Disconnect the function to the speficied channel name			* 			* @public			* @param	sNAME 	: Signal channel name	(String) 			* @param	oFUNC		: Reference function	(Function)  			* @return	void			*/			public function disconnect( sNAME : String , oFUNC : Function ) : void {				_remove( sNAME , oFUNC );			}						/**			* Emit some datas one the specified channel			* 			* @public			* @param	sNAME : Signal channel name 	(String)			* @param	args	: Optional arguments 	(Array)			* @return	void			*/			public function emit( sNAME : String , ...args : Array) : void {								var v : Vector.<LightSignalItem> = _findByName( sNAME );				var o : LightSignalItem;				for each( o in v ){					o.oFUNC.apply( null , args );											if(o.bONESHOT)						_remove( o.sNAME, o.oFUNC);				}			}						/**			* Dispose all of the registered signal listener			* 			* @public			* @return	void			*/			public function dispose() : void {				_vLISTENERS = new Vector.<LightSignalItem>();			}								// -------o protected						/**			* Return of list of items who use the specified channel name 			*			* @param 	name : specified channel name (String)			* @return	void			*/			protected function _findByName( name : String ) : Vector.<LightSignalItem> {								var vRES : Vector.<LightSignalItem> = new Vector.<LightSignalItem>();				var o : LightSignalItem;				for each( o in _vLISTENERS ){					if( o.sNAME == name ){						vRES.push( o );					}					}				return vRES;							}						/**			* Find connected item with the specified channel name and function			*			* @param 	name 	: specified channel name 	(String)			* @param 	f	: listener function		(Function)			* @return	void			*/			protected function _findConnected( name : String , f : Function ) : LightSignalItem {								var oRES 	: LightSignalItem;				var o 	: LightSignalItem;				for each( o in _vLISTENERS ){					if(o.sNAME == name && o.oFUNC == f){						oRES = o;							break;						}				}								return oRES;															}						/**			* Remove an item from the list			*			* @param 	name 	: specified chann name		(String)			* @param 	f	: listener function		(Function)			* @return	void			*/			protected function _remove( name : String , f : Function ) : void {				var oRES 	: LightSignalItem;				var oFUNC 	: Function = function( o : LightSignalItem , u : uint , v : Vector.<LightSignalItem> ) : Boolean{					if(o.sNAME == name && o.oFUNC == f){						oRES = o;							return false;					}else 						return true;				};				_vLISTENERS = _vLISTENERS.filter( oFUNC );			}					// -------o misc			public static function trc(...args : *) : void {				//Logger.log(LightSignal, args);			}						/**			* Return the singleton instance of the class			* @public			* @return instance of the class (LightSignal)			*/			static public function getInstance() : LightSignal {								if( !__instance )					__instance = new LightSignal( new SingletonEnforcer() );												return __instance;		}	}}import org.shoebox.utils.logger.Logger;internal class SingletonEnforcer{}	/**	* org.shoebox.events.LightSignalItem	* @author shoebox	*/	internal class LightSignalItem {				internal var bONESHOT		:Boolean;		internal var oFUNC		:Function;		internal var sNAME		:String;				// -------o constructor					/**			* Constructor of the LightSignal class			*			* @public			* @return	void			*/			public function LightSignalItem( name : String , func : Function , b : Boolean ) : void {				sNAME = name;				oFUNC = func;				bONESHOT = b;			}		// -------o public				// -------o protected		// -------o misc			public static function trc(...args : *) : void {				Logger.log(LightSignalItem, args);			}	}