package org.shoebox.collections {	import org.shoebox.errors.Errors;	import org.shoebox.utils.logger.Logger;	/**	 *	* org.shoebox.data.BTree	* @date:14 sept. 09	* @author shoe[box]	*/	public class BTree{				protected var _oRoot			: BTreeNode;		protected var _oFunc			: Function = _defautFunc;				// -------o constructor			/**			* contructor			* @return void			*/			public function BTree():void{							}					// -------o public												/**			* 			* @param			* @return			*/			public function set compareFunc(f:Function):void{				_oFunc = f;			}									/**			* 			* @param			* @return			*/			public function insert(v:*):BTreeNode{								var oCurrent : BTreeNode;								//					if(!_oRoot){						_oRoot = new BTreeNode( { root : true } );						return _oRoot;					}else						oCurrent = _oRoot;													//						while(oCurrent){												if(oCurrent.root){														if(!oCurrent.left){								oCurrent.left = new BTreeNode({value:v});								return oCurrent.left;							}else								oCurrent = oCurrent.left;														if(!oCurrent.right){								oCurrent.right = new BTreeNode({value:v});								return oCurrent.right;							}else								oCurrent = oCurrent.right;													}else{													if(!_oFunc(v,oCurrent.value)){																if(oCurrent.left)									oCurrent = oCurrent.left;								else{									oCurrent.left = new BTreeNode({value:v});									return oCurrent.left;								}																						}else{																if(oCurrent.right)									oCurrent = oCurrent.right;								else{									oCurrent.right = new BTreeNode({value:v});									return oCurrent.right;								}																					}														}										}													return null;								}									/**			* 			* @param			* @return			*/			public function binaryPath(v:*):String{				if(_oRoot==null)					Errors.throwError(new Error('The tree is empty...'));								var sBIN:String = '';					var oCURRENT:BTreeNode = _oRoot;								while(oCURRENT){										if(v == oCURRENT.value)						break;					else{						if(!oCURRENT.root)							sBIN+= (_oFunc(v , oCURRENT.value)) ? 1 : 0;													oCURRENT = (_oFunc(v , oCURRENT.value)) ? oCURRENT.right : oCURRENT.left;					}										}								return sBIN;			}						/**			* 			* @param			* @return			*/			public function find(v:*):BTreeNode{								if(_oRoot==null)					Errors.throwError(new Error('The tree is empty...'));								var b:Boolean;				var oCURRENT:BTreeNode = _oRoot;								while(oCURRENT){										if(v == oCURRENT.value)						return oCURRENT;					else 						oCURRENT = (_oFunc(v , oCURRENT.value)) ? oCURRENT.right : oCURRENT.left;																}								return oCURRENT;			}						/**			* 			* @param			* @return			*/			public function toString():String{				var sRES:String = '';				var oCURRENT:BTreeNode = _oRoot;				sRES+=_parse(oCURRENT);								return sRES;			}					// -------o private				/**			* 			* @param			* @return			*/			protected function _defautFunc(v1:* , v2:*):Boolean{				return (v1 > v2);			}						/**			* 			* @param			* @return			*/			protected function _parse(o:BTreeNode,uDEPTH:uint = 0):String{				var sRES:String = 'NODE :::'+o.value+'\n';								var i:uint = 0;												uDEPTH++;								if(o.left!==null){										for(i ; i < uDEPTH ; i++)						sRES+='\t';											sRES+='|_ LEFT (0)  :  '+_parse(o.left,uDEPTH);				}								if(o.right!==null){										for(i=0 ; i < uDEPTH ; i++)						sRES+='\t';											sRES+='|_ RIGHT (1) :  '+_parse(o.right,uDEPTH);				}									return sRES;			}					// -------o misc			public static function trc(arguments:*) : void {				Logger.log(BTree,arguments);			}	}}import org.shoebox.core.BoxObject;import org.shoebox.utils.logger.Logger;/** *	* org.shoebox.collections.BTreeNode	* @date:14 sept. 09	* @author shoe[box]	*/	internal final class BTreeNode{				protected var _bROOT		:Boolean = false;		protected var _oLEFT		:BTreeNode = null;		protected var _oRIGHT		:BTreeNode = null;		protected var _oVALUE		:*;				// -------o constructor			/**			* contructor			* @return void			*/			public function BTreeNode(oINIT:Object):void{				if(oINIT!==null)					BoxObject.accessorInit(this,oINIT);			}					// -------o public					/**			* 			* @param			* @return			*/			public function set root(b:Boolean):void{				_bROOT = b;			}						/**			* 			* @param			* @return			*/			public function get root():Boolean{				return _bROOT;			}					/**			* 			* @param			* @return			*/			public function set value(v:*):void{				_oVALUE = v;			}						/**			* 			* @param			* @return			*/			public function get value():*{				return _oVALUE;			}						/**			* 			* @param			* @return			*/			public function set left(node:BTreeNode):void{				_oLEFT = node;			}						/**			* 			* @param			* @return			*/			public function get left():BTreeNode{				return _oLEFT;			}						/**			* 			* @param			* @return			*/			public function set right(node:BTreeNode):void{				_oRIGHT = node;			}						/**			* 			* @param			* @return			*/			public function get right():BTreeNode{				return _oRIGHT;			}					// -------o private		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(BTreeNode,arguments);			}	}