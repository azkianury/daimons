/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.media {	import org.shoebox.media.fx.ISoundFx;	import org.shoebox.media.fx.SoundFx;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.utils.logger.Logger;	import mx.core.SoundAsset;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.utils.Timer;	/**	 * org.shoebox.media.SoundTrack	* @author shoebox	*/	public class SoundTrack {				public var isPlaying			: Boolean = false;				protected var _oChannel 		: SoundChannel;		protected var _oCurrent 		: SoundEntry;		protected var _oTransform 		: SoundTransform;		protected var _sTrackID 		: String;		protected var _oTimer 			: Timer;		protected var _iTrackVolume 		: uint = 100;		protected var _vSndQueue 		: Vector.<SoundEntry>;				// -------o constructor					public function SoundTrack( sID : String , oST : SoundTransform = null) : void {				_sTrackID = sID;				_vSndQueue = new Vector.<SoundEntry>();				if(oST==null)					_oTransform = new SoundTransform();				else					_oTransform = oST;									_oTimer = new Timer( 50 );				_oTimer.addEventListener(TimerEvent.TIMER , _onTick , false , 10 , true);			}		// -------o public						/**			* get transform function			* @public			* @param 			* @return			*/			public function get transform() : SoundTransform {				return _oTransform;			}						/**			* set transform function			* @public			* @param 			* @return			*/			public function set transform( t : SoundTransform ) : void {				_oTransform = t;				if( _oChannel )					_oChannel.soundTransform = _oTransform;			}						/**			* queneEntry function			* @public			* @param 			* @return			*/			public function queueEntry( o : SoundEntry ) : void {								var bEMPTY : Boolean = false;				if(_vSndQueue.length == 0)					bEMPTY = true;									_vSndQueue.push( o );				if( bEMPTY )					_next();							}						/**			* queue function			* @public			* @param 			* @return			*/			public function queue( o : SoundAsset , nLOOPS : uint = 1 , v : Vector.<Class> = null ) : void {								var vFILTERS : Vector.<ISoundFx>;								if(v !== null){										vFILTERS = new Vector.<ISoundFx>();											var c : Class;					for each( c in v )						vFILTERS.push( Factory.build( c , {target : _oTransform }));								}								queueEntry( new SoundEntry( o , nLOOPS , vFILTERS ) );							}						/**			* play function			* @public			* @param 			* @return			*/						public function play( o : SoundAsset , nLOOPS : uint = 1 , v : Vector.<Class> = null , bCONTINUE : Boolean = true ) : void {								isPlaying = true;								if(_oChannel)					_oChannel.stop();								var vFILTERS : Vector.<ISoundFx>;								if(v !== null){										vFILTERS = new Vector.<ISoundFx>();											var c : Class;					for each( c in v )						vFILTERS.push( Factory.build( c , {target : _oTransform }));								}								_oCurrent = new SoundEntry( o , nLOOPS , vFILTERS);				_oChannel = _oCurrent.play();								if(bCONTINUE)					_oChannel.addEventListener( Event.SOUND_COMPLETE , _next , false , 10 , true );								if(_oCurrent.filter !== null){					if(!_oTimer.running)						_oTimer.start();					_onTick();				}			}						/**			* close function			* @public			* @param 			* @return			*/			final public function close() : void {				isPlaying = false;				if( !_oChannel )					return;				_oChannel.stop();				_oChannel = null;				SoundManager.closeTrack( _sTrackID );							}						/**			* setVolume function			* @public			* @param 			* @return			*/			final public function setVolume( n : Number , nPan : Number = 0 , ll : Number = 1 , rr : Number = 1 , rl : Number = 1 , lr : Number = 1) : void {								if( isNaN( n ) )					return;								var 	f : SoundTransform = transform;					f.volume = n * _iTrackVolume / 100 ;								//					//if( nPan !== 0 ) {						//f.pan = nPan;						f.leftToLeft = ll;						f.rightToRight = rr;						f.rightToLeft = rl;						f.leftToRight = lr;					//}								if( _oChannel ) 					_oChannel.soundTransform = f;								}						/**			* linear function			* @public			* @param 			* @return			*/			final public function linear( gain : Number = 1 , pan : Number = 0 ) : void {				// -- CLAMP								var lr : Number , ll : Number , rl : Number , rr : Number , vol : Number;								if ( gain < 0.0 )					gain = 0.0;				else if ( gain > 1.0 )					gain = 1.0;					if ( pan < -1.0 )					pan = -1.0;				else if ( pan > 1.0 )					pan = 1.0;					if ( pan < 0.0 ) { //left					lr = 0.0;					ll = gain;					rl = -pan * gain;					rr = ( pan + 1.0 ) * gain;				} else if ( pan > 0.0 ) { // right					lr = pan * gain;					ll = ( 1.0 - pan ) * gain;					rl = 0.0;					rr = gain;				} else { // center					lr = rl = 0.0;					ll = rr = gain;				}				setVolume( gain , 0 , ll , rr , rl , lr );			}									/**			* setTrackVolume function			* @public			* @param 			* @return			*/			final public function setTrackVolume( u : uint ) : void {				_iTrackVolume = u;			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			protected function _next( e : Event = null ) : void {				trace('next');				if(e)					e.target.removeEventListener( Event.SOUND_COMPLETE , _next , false );								if(_vSndQueue.length==0)					return;									_oCurrent = _vSndQueue.shift();				_oChannel = _oCurrent.play();								if(_oCurrent.filter !== null){					_oTimer.start();					_onTick();				}							}						/**			* 			*			* @param 			* @return			*/			protected function _onTick( e : TimerEvent = null ) : void {				var o : SoundFx;				for each(o in _oCurrent.filter)					o.update( _oChannel.position , _oCurrent.asset.length );									_oChannel.soundTransform = _oTransform;			}		// -------o misc			public static function trc(...args : *) : void {				Logger.log(SoundTrack, args);			}	}}