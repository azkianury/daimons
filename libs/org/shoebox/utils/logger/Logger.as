/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.utils.logger {	import org.shoebox.patterns.singleton.ISingleton;	import org.shoebox.utils.ClassUtils;	import flash.events.EventDispatcher;	import flash.utils.getTimer;	/**	 * org.shoebox.utils.logger.Logger	* @author shoebox	*/	public class Logger extends EventDispatcher implements ISingleton{				public static const LOGLEVEL_LOG	:uint = 0;		public static const LOGLEVEL_WARN	:uint = 1;		public static const LOGLEVEL_ERROR	:uint = 2;		public static const LOGLEVEL_FATAL	:uint	= 3;				protected static var __aLEVELS		:Array = ['LOG' , 'WARNING' , 'ERROR' , 'FATAL'];		protected static var __instance		:Logger = null;		protected static var __uLEVEL			:uint = 1;		protected static var __vEXCLUDE		:Vector.<String> = Vector.<String>([]);				// -------o constructor					public function Logger( e : SingletonEnforcer) : void {							}		// -------o public						/**			* exclude function			* @public			* @param 			* @return			*/			static public function exclude( s : String ) : void {				__vEXCLUDE.push( s );			}						/**			* getInstance function			* Singleton static method to get the unique instance of the class			* 			* @public			* @return the instance of the class or a new one (Logger)			*/			static public function getInstance() : Logger {								if(__instance == null)					__instance = new Logger( new SingletonEnforcer() );									return __instance;			}						/**			* set level function			* Adding a log level filter			* 			* @public			* @param	level : Log level						(UINT)			* 		Possible values are :                  *                                      <ul>                  *                                              <li>LOGLEVEL_LOG</li>                  *                                              <li>LOGLEVEL_ERROR</li>                  *                                              <li>LOGLEVEL_WARN</li>                  *                                              <li>LOGLEVEL_FATAL</li>                  *                                      </ul>			* @return	void 			*/			static public function set level( u : uint) : void {				__uLEVEL = u;			}						/**			* log function			* Logging by using the LOG level			* 			* @public				* @param 	from : The instance who made the function call 	( * )			* @param 	args : Optional arguments 				( * )			* @return	void 			*/			static public function log( from : * , args : * ) : void {				getInstance().trc.apply( from , [from , args , LOGLEVEL_LOG]);			}						/**			* error function			* Logging by using the ERROR level			* 			* @public				* @param 	from : The instance who made the function call 	( * )			* @param 	args : Optional arguments 				( * )			* @return	void 			*/			static public function error( from : * , ...args ) : void {				getInstance().trc.apply( from , [from , args , LOGLEVEL_ERROR]);			}						/**			* warn function			* Logging by using the WARNING error level			* 			* @public				* @param 	from : The instance who made the function call 	( * )			* @param 	args : Optional arguments 				( * )			* @return	void 			*/			static public function warn( from : * , ...args ) : void {				getInstance().trc.apply( from , [from , args , LOGLEVEL_WARN]);			}						/**			* fatal function			* Logging by using the FATAL error level			* 			* @public				* @param 	from : The instance who made the function call 	( * )			* @param 	args : Optional arguments 				( * )			* @return	void 			*/			static public function fatal( from : * , ...args ) : void {				getInstance().trc.apply( from , [from , args , LOGLEVEL_FATAL]);			}						/**			* trcObject function			* @public			* @param 			* @return			*/			static public function trcObject( from : * , o : Object ) : void {				getInstance().trcObj( from , o );			}						/**			* name function			* @public			* @param 			* @return			*/			final public function trcObj( from : * , o : Object ) : void {				_trcObj( from , o );			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _trcObj( from : * , o : Object ) : void {								//					var sNAME : String = ClassUtils.getQualifiedClassNameCached(from);									//					trace('OBJTRACE [ '+getTimer()+'ms ]---------------------------------------------------------------------------------------------------------------');					trace( sNAME +' > ' + ClassUtils.getQualifiedClassNameCached(from));					trace( '\t'+o+' Properties / Values');									//					var prop : String;					for( prop in o ){						trace( '\t\t '+prop+' === '+o[prop] );					}					trace('\n');							}						/**			* Generic log method			*			* @protected			* @param 	from : The instance who made the function call 	( * )			* @param 	args : Optional arguments 				( * )			* @param	level : Log level						(UINT)			* 		Possible values are :                  *                                      <ul>                  *                                              <li>LOGLEVEL_LOG</li>                  *                                              <li>LOGLEVEL_ERROR</li>                  *                                              <li>LOGLEVEL_WARN</li>                  *                                              <li>LOGLEVEL_FATAL</li>                  *                                      </ul>			* @return	void 			*/			protected function trc( from : * , args : * , uLEVEL : uint = LOGLEVEL_LOG) : void {							//					if(uLEVEL < __uLEVEL)						return;								//					var sNAME : String = ClassUtils.getQualifiedClassNameCached(from);										var s: String;					for each( s in __vEXCLUDE ){												if( sNAME.indexOf(s)!==-1)							return;											}									//					trace(__aLEVELS[uLEVEL]+' [ '+getTimer()+'ms ]---------------------------------------------------------------------------------------------------------------');					trace( sNAME +' > ' + ClassUtils.getQualifiedClassNameCached(from));													//					if(args is Array){												var uLEN:uint = args.length;						var o:*;						if( uLEN > 1){														var i:int = 0;							for( i ; i < uLEN ; i++ ){								o = args[i];								trace('\t|____ ('+i+') '+o+' == ('+ClassUtils.getQualifiedClassNameCached(o)+')');							}													}else{							o = args[0];							trace('\t|____ '+o+' == ('+ClassUtils.getQualifiedClassNameCached(o)+')');						}					}else{						trace('\t|____ '+args+' == ('+ClassUtils.getQualifiedClassNameCached(args)+')');					}					trace('\n');								//					//if(hasEventListener(LoggerEvent.LOG_EVENT))					//	dispatchEvent(new LoggerEvent( from , args , uLEVEL ));			}					// -------o misc	}}internal class SingletonEnforcer{}