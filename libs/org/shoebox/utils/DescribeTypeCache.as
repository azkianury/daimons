/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.utils {	import org.shoebox.errors.Errors;	import org.shoebox.utils.logger.Logger;	import flash.utils.Dictionary;	import flash.utils.describeType;	import flash.utils.getQualifiedClassName;	/**	 * This class permit to cache <code>describeType()</code> method result in point to do some optimisations	* The description of any class is stocked in an static Dictionary	* 	* An method exist to flush the cache @see flush() method	* 	* org.shoebox.utils.DescribeTypeCache	* @author shoebox	*/	public class DescribeTypeCache {				protected static var _oCACHE		:Dictionary = new Dictionary(true);				// -------o constructor					public function DescribeTypeCache() : void {				Errors.throwError(Errors.STATICCLASSERROR);			}		// -------o public					/**			* Permit to make a describeType request			* If the class description is cached it is returned			* else the description is obtained and cached.			* 			* @public			* @param 	o : Object to be describe. It can be an object or a class name ident (my.class.test)			* @return	describeType response (xml)			*/			static public function getDesc( o : * ) : XML {				var sCLASSNAME:String = (o is String) ? o : getQualifiedClassName(o);								//Result is not cached					if(_oCACHE[sCLASSNAME] == null)						_oCACHE[sCLASSNAME] = describeType(o);								return _oCACHE[sCLASSNAME];			}						/**			* flush function			* Flush the cache			* 			* @public			* @return void			*/			public function flush() : void {				_oCACHE = new Dictionary(true);			}				// -------o protected		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(DescribeTypeCache,arguments);			}	}}