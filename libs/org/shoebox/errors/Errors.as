/**  HomeMade by shoe[box]  IN THE BOX PACKAGE (http://code.google.com/p/inthebox/)     Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.errors {	import flash.net.URLLoader;	import flash.errors.IOError;	import flash.events.IOErrorEvent;	import flash.events.UncaughtErrorEvent;	import org.shoebox.display.BoxContainer;	import org.shoebox.patterns.service.HTTP_Service;	import org.shoebox.utils.display.STAGEINSTANCE;	import org.shoebox.utils.logger.Logger;	import flash.errors.IllegalOperationError;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.HTTPStatusEvent;	import flash.net.URLRequest;	import flash.system.Capabilities;	import flash.utils.describeType;	/**	 *	* org.shoebox.errors.Errors	* @date:27 janv. 09	* @author shoe[box]	*/	final public class Errors{						public static var ABSTRACTERROR 		:String = 'Abstract class cannot be instanced';						public static var ARGUMENTSERROR		:String = 'One or several arguments are invalid, please check.';						public static var DONOTHING			:String = 'Error, this donothing method must be overriden';						public static var SINGLETONERROR 	:String = 'A instance of the singleton is Already in used';						public static var STATICCLASSERROR	:String = 'Static class must not be instanced';						public static var IMPLEMENTATIONERROR	:String = 'Implementation error';					// -------o constructor					// -------o public						/**			* Constructor			* 			* @param 			* @return			*/			public function Errors() : void {				throwError(new IllegalOperationError(STATICCLASSERROR));			}						/**			* 			*			* @param 			* @return			*/			static public function throwError(e:* , from:* = null) : void {				//trace('throwError ::: '+DescribeTypeCache.getDesc(e));								var s : String = from ? '<b>FROM = </b>'+describeType(from).@name : '';				var t : String = 'An error occured - ';								if( e is Error || e is UncaughtErrorEvent ){										if( e is UncaughtErrorEvent )						e = ( e as UncaughtErrorEvent ).error;															var eTmp : Error = e as Error;										t += eTmp.errorID;					s += '\n\t- <b>Type</b> - '+eTmp.name;					s += '\n\t- <b>Error code</b> - '+eTmp.errorID+'\n';					//s += eTmp.getStackTrace( );														}else if( e is Event ){										t += e.type;										if( e is ErrorEvent ){						var err : ErrorEvent = e as ErrorEvent;						s += '\n'+err.toString( )+'\n';						s += '\n\t- <b>Type</b> - '+err.type;						s += '\n\t- <b>Error code</b> - '+err.errorID;						s += '\n\t- <b>from</b> - '+err.target;						s += '\n\t- <b>text</b> - '+err.text;											}										if( e is HTTPStatusEvent ){												var errHTTP : HTTPStatusEvent = e as HTTPStatusEvent;							s = '\n<b>HTTP ERROR CODE</b> - '+errHTTP.status+' --- '+errHTTP.responseURL;											}										if( e is IOErrorEvent ){						var errIO : IOErrorEvent = e as IOErrorEvent;							s = '\n<b>IO ERROR TYPE :: </b> - '+errIO.errorID+' --- '+errIO+' - '+errIO.target;											}										s += '\n\n<b>TARGET</b> : '+( e as Event ).target ;					s += '\n<b>EVENTPHASE</b> : '+( e as Event ).eventPhase ;										if( from is HTTP_Service ) {						var req : URLRequest = from.request as URLRequest;						s += '\n\n<b>URLREQUEST</b>\n\tREQUEST - '+req.url+'\n\tMETHOD - '+req.method;						if( req.data ){							s += '\n\tURLVARIABLES : ';							var prop : String;							for( prop in req.data )								s += '\n\t\t'+prop+' -- '+req.data[prop];						}					}				}else					s += e.toString( );					s += '\n\n<b>CAPABILITES : </b>\n';					s += Capabilities.serverString;								if( STAGEINSTANCE !== null )					BoxContainer.popup(STAGEINSTANCE , t , s );				else					throw(e);							}
			/**			* Check the arguments of a function call, throw an error 			* if any of the arguments is undefined or null			*			* @param	a : Arguments Array			* @return	void			*/			static public function checkArgs(a:Array) : void {								var o:*;				for each(o in a)					if(o==null || o==undefined)						throw new ArgumentError(ARGUMENTSERROR);			}					// -------o private					// -------o misc			public static function trc(arguments:*) : void {				Logger.log(Errors,arguments);			}	}}	