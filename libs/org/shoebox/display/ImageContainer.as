/**  HomeMade by shoe[box]  IN THE BOX PACKAGE (http://code.google.com/p/inthebox/)     Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.display {	import org.shoebox.utils.logger.Logger;
	
	import flash.display.Bitmap;
	import flash.display.BitmapData;
	import flash.display.MovieClip;
	import flash.display.Sprite;
	import flash.events.Event;
	import flash.events.KeyboardEvent;
	import flash.events.MouseEvent;
	import flash.geom.Matrix;
	import flash.geom.Point;
	import flash.geom.Rectangle;	
	/**	 * @author shoebox	 */	public class ImageContainer extends MovieClip {		protected var _uWIDTH : Number = 800;		protected var _uHEIGHT : Number = 600;		protected var _nSCALE : Number = 1;		protected var _oSOURCE : BitmapData;		protected var _mcMEDIA : Sprite = new Sprite();		protected var _oBITMAP : Bitmap = new Bitmap();		protected var _oCURRENT : BitmapData;		protected var _pPOINT : Point = new Point(0, 0);		protected var _pIN : Point;		protected var _pOUT : Point;		// -------o constructor			public function ImageContainer() : void {				addChild(_mcMEDIA);				_mcMEDIA.addChild(_oBITMAP);				addEventListener(Event.ADDED_TO_STAGE, _onStaged, false, 1, false);			}		// -------o public							/**			 * 			 *			 * @param 			 * @return			 */			public function show(o : BitmapData) : void {				_pPOINT = new Point(0,0);				if(_oSOURCE !== null) {					_oSOURCE.unlock();					_oSOURCE.dispose();								}				_oSOURCE = o;				_oSOURCE.lock();				_nSCALE = BoxBitmapData.getRatio(o, width, height);				_run();			}		// -------o protected							/**			 * 			 *			 * @param 			 * @return			 */			protected function _onStaged(e : Event = null) : void {				stage.addEventListener(KeyboardEvent.KEY_DOWN, _onKey, false, 0, true);				_mcMEDIA.addEventListener(MouseEvent.MOUSE_UP, _onMouse, false, 10, true);				_mcMEDIA.addEventListener(MouseEvent.MOUSE_DOWN, _onMouse, false, 10, true);				_mcMEDIA.addEventListener(MouseEvent.MOUSE_WHEEL, _onMouse, false, 10, true);								removeEventListener(Event.ADDED_TO_STAGE, _onStaged);				if(_oSOURCE !== null)						_run();			}				/**			 * 			 *			 * @param 			 * @return			 */			protected function _run() : void {				_draw();			}				/**			 * 			 *			 * @param 			 * @return			 */			protected function _onKey(e : KeyboardEvent) : void {									switch(e.keyCode) {											case 107:						_nSCALE *= 1.1;						break;												case 109:						_nSCALE *= 0.9;						break;				}									_nSCALE = Math.max(_nSCALE, .1);								_draw();			}				/**			 * 			 *			 * @param 			 * @return			 */			protected function _draw() : void {									var 	oREC : Rectangle = new Rectangle(0, 0, width, height);								if(_oSOURCE==null)					return;				var iDIFFX:Number = width - _oSOURCE.width * _nSCALE;				var iDIFFY:Number = height - _oSOURCE.height * _nSCALE;																var 	oMAT : Matrix = new Matrix();					oMAT.scale(_nSCALE, _nSCALE);									if(iDIFFX > 0 && iDIFFY > 0){					oMAT.translate(iDIFFX/2 , iDIFFY/2);					_pPOINT = new Point(0,0);				}else						oMAT.translate(_pPOINT.x + iDIFFX / 2, _pPOINT.y + iDIFFY / 2);										var 	oIMAGE : BitmapData = new BitmapData(width, height, true, 0xFF6600);					oIMAGE.draw(_oSOURCE, oMAT,null,null,null,true);									_oBITMAP.bitmapData = oIMAGE;				_oBITMAP.x = -_oBITMAP.width / 2;				_oBITMAP.y = -_oBITMAP.height / 2;			}				/**			 * 			 *			 * @param 			 * @return			 */			protected function _onMouse(e : MouseEvent) : void {									switch(e.type) {											case MouseEvent.MOUSE_DOWN:						_mcMEDIA.startDrag();						_mcMEDIA.addEventListener(MouseEvent.MOUSE_MOVE, _onMouse, false, 10, true);						stage.addEventListener(MouseEvent.MOUSE_UP , _onMouse , false , 1 , true);						break;										case MouseEvent.MOUSE_UP:						_mcMEDIA.stopDrag();							_mcMEDIA.removeEventListener(MouseEvent.MOUSE_MOVE, _onMouse);						stage.removeEventListener(MouseEvent.MOUSE_UP , _onMouse);						break;															case MouseEvent.MOUSE_MOVE:						_pPOINT.x+= _mcMEDIA.x;						_pPOINT.y+= _mcMEDIA.y;						_mcMEDIA.x = 0;						_mcMEDIA.y = 0;						_draw();						break;											case MouseEvent.MOUSE_WHEEL:						if(e.delta > 0)							_nSCALE *= 1.1;						else							_nSCALE *= 0.9;						_draw();						break;									}			}		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(ImageContainer,arguments);			}				override public function get width() : Number {				return _uWIDTH;			}				override public function set width(w : Number) : void {				_uWIDTH = w;			}				override public function get height() : Number {				return _uHEIGHT;			}				override public function set height(h : Number) : void {				_uHEIGHT = h;			}	}}