/**  HomeMade by shoe[box]  IN THE BOX PACKAGE (http://code.google.com/p/inthebox/)     Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.display {	import org.shoebox.errors.Errors;	import org.shoebox.utils.logger.Logger;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.errors.IllegalOperationError;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	/**	 * @author shoebox	 */	public class BoxBitmapData extends MovieClip {
		//@@constructor			public function BoxBitmapData() : void {				throw new IllegalOperationError(Errors.STATICCLASSERROR);			}		//public -------------00						/**			* patternFill function			* @public			* @param 			* @return			*/			static public function patternFill( o : BitmapData , pattern : BitmapData , r : Rectangle = null ) : BitmapData {								o.unlock();				if( r == null )					r = o.rect;									var uDIVX : uint = ( r.width / pattern.width) + 1;				var uDIVY : uint = ( r.height  / pattern.height) + 1;				var oREC : Rectangle = (r==null) ? pattern.rect : r;				var oPNT : Point = oREC.topLeft;								var i : uint = 0 , j : uint = 0;								for( i ; i < uDIVX ; i++ ){					oPNT.x = i * pattern.width + oREC.x;					j = 0;					for( j ; j < uDIVY ; j++ ){						oPNT.y = j * pattern.height + oREC.y;						o.copyPixels( pattern , pattern.rect , oPNT , null , null , true );					}									}				o.lock();				return o;							}						/**			* Crop a source bitmpdata			*			* @param 	oSOURCE 	: BitmapData source 		(BITMAPDATA)			* @param 	oRec		: Zone to crop 			(RECTANGLE)			* @param	oPnt		: Optional new position		(POINT)			* @return	result	: Cropped bitmapdata		(BITMAPDATA)			*/			static public function crop(oSOURCE:BitmapData , oRec:Rectangle , oPnt:Point = null) : BitmapData {								//					if(oPnt == null)						oPnt = new Point(0,0);								//					var iW:Number = Math.min(oRec.width,oSOURCE.width);					var iH:Number = Math.min(oRec.height,oSOURCE.height);								//						var 	oB:BitmapData = new BitmapData(iW, iH ,false,0xFF0000);						oB.copyPixels(oSOURCE.clone() , oRec,oPnt);									return oB;			}						/**			*			* @param 			* @return			*/			public static function extractColor( source:BitmapData, iCOLS:uint , oR : Rectangle = null ):Vector.<uint> {				trace('extractColor ::: '+arguments);				var vAVERAGES:Vector.<uint> = new Vector.<uint>();								var uLEN	:uint = Math.sqrt(iCOLS);				var iW	:uint = !oR ? uLEN : oR.x + uLEN;				var iH	:uint = !oR ? uLEN : oR.y + uLEN;				var iBLOCKW	:uint = ( !oR ? source.width : oR.width ) / uLEN;				var iBLOCKH	:uint = ( !oR ? source.height : oR.height ) / uLEN;				var oREC	:Rectangle = new Rectangle(0,0,iBLOCKW,iBLOCKH);								var iX :int = !oR ? 0 : oR.x;				var iY :int = !oR ? 0 : oR.y;				var oTMP :BitmapData = new BitmapData(iBLOCKW,iBLOCKH);				for( iY ; iY < iH ; iY++) {											for( iX ;iX < iW ; iX++){												oREC.x = iX*iBLOCKW;						oREC.y = iX*iBLOCKH;						oTMP.copyPixels(source,oREC,new Point());						trace('col :::'+averageColour(scaleBy(oTMP.clone(),.25)));						vAVERAGES.push(averageColour(scaleBy(oTMP.clone(),.25)));										}									}				trace('vAVERAGES ::: '+vAVERAGES);				return vAVERAGES;							}							/**			* 			*			* @param 			* @return			*/			public static function averageColour( source : BitmapData , oREC:Rectangle = null) : uint {								var nR	:Number = 0;				var nG	:Number = 0;				var nB	:Number = 0;								var nINC	:uint;				var uCOL	:uint;				var nX	:uint = (oREC==null) ? 0 	: oREC.x;				var nY	:uint = (oREC==null) ? 0 	: oREC.y;				var nYB	:uint = nY;				var uWIDTH	:uint = (oREC==null) ? source.width 	: oREC.x + oREC.width;
				var uHEIGHT : uint = (oREC == null) ? source.height : oREC.y + oREC.height;
							for (nX; nX < uWIDTH; nX++){					for (nY = nYB; nY < uHEIGHT; nY++){											uCOL = source.getPixel(nX, nY);												nR += uCOL >> 16 & 0xFF;						nG += uCOL >> 8  & 0xFF;						nB += uCOL       & 0xFF;												nINC++;					}				}								nR /= nINC;				nG /= nINC;				nB /= nINC;				return nR << 16 | nG << 8 | nB;			}			/**			* 			*			* @param 			* @return			*/			static public function scaleBy(oSOURCE:BitmapData , nRATIO:Number) : BitmapData {								var 	oMAT:Matrix = new Matrix();					oMAT.scale(nRATIO , nRATIO);								var iW:Number = oSOURCE.width* nRATIO ;				var iH:Number =oSOURCE.height* nRATIO;								var 	oB:BitmapData = new BitmapData(iW,iH,true,0xFF0000);					oB.draw(oSOURCE,oMAT,null,null,null,true);									return oB;			}						/**			* Resize a bitmapdata to fit in the w/h size			*				* @param 	oSOURCE	: BitmapData source 		(BITMAPDATA)			* @param	w		: Desired width		(NUMBER) 			* @param	h		: Desired height		(NUMBER) 			* @return	result	: Cropeed bitmapdata		(BITMAPDATA)			*/			static public function resize(oSOURCE:BitmapData , w:Number , h:Number , bMAX:Boolean = false ,bZOOM:Boolean = false) : BitmapData {								var nRATIO:Number = getRatio(oSOURCE,w,h,bMAX,bZOOM);							if( nRATIO >= 1 )					return oSOURCE;								var 	oMAT : Matrix = new Matrix();					oMAT.scale(nRATIO , nRATIO);								var 	oB : BitmapData = new BitmapData(oSOURCE.width * nRATIO , oSOURCE.height * nRATIO , oSOURCE.transparent , 0 );					oB.draw(oSOURCE,oMAT);								return oB;			}							/**			* 			*			* @param 			* @return			*/			static public function getRatio(oSOURCE:BitmapData , w:Number , h:Number , bMAX:Boolean = false , bZOOM:Boolean = false) : Number {								var nRATIO:Number;				if(bMAX)					nRATIO = Math.max(w / oSOURCE.width , h  / oSOURCE.height);				else					nRATIO = Math.min(w / oSOURCE.width , h / oSOURCE.height );								if(!bZOOM)					nRATIO = Math.min(nRATIO,1);									return nRATIO;				}		//private ------------00
		//misc ---------------00
			public static function trc(arguments:*) : void {				Logger.log(BoxBitmapData,arguments);			}	}}