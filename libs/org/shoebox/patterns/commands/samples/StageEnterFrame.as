package org.shoebox.patterns.commands.samples {	import org.shoebox.errors.Errors;	import org.shoebox.patterns.commands.AbstractCommand;	import org.shoebox.patterns.commands.ICommand;	import org.shoebox.patterns.commands.ICommandBatch;	import org.shoebox.patterns.singleton.ISingleton;	import org.shoebox.utils.logger.Logger;	import flash.display.Stage;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.utils.Dictionary;	/**	 *	* org.shoebox.patterns.commands.samples.StageEnterFrame	* @date:2 sept. 09	* @author shoe[box]	*/	public class StageEnterFrame extends AbstractCommand implements ICommand,ICommandBatch,ISingleton{				protected static var __instance		:StageEnterFrame;				protected var __oDICO			:Dictionary;		protected var _oSTAGE			:Stage;				// -------o constructor					/**			* contructor			* @return void			*/			public function StageEnterFrame():void{				if(__instance!==null)					Errors.throwError(new IllegalOperationError(Errors.SINGLETONERROR));									__oDICO = new Dictionary(true); 			}					// -------o public						/**			* set stage function			* @public			* @param 			* @return			*/			public function set stage( o : Stage ) : void {				_oSTAGE = o;			}						/**			* 			* @param			* @return			*/			static public function register(target:IFrameable):void{				//trc('register ::: '+target);				if(!(target is IFrameable))					Errors.throwError('TARGET MUST IMPLEMENT THE iFrameable INTERFACE TO BE REGISTERED BY THE STAGEENTERFRAME COMMAND');								getInstance().__register(target);			}						/**			* 			*			* @param 			* @return			*/			static public function unRegister(target:IFrameable) : void {				getInstance().__unregister(target);			}						/**			* 			* @param			* @return			*/			override final public function onExecute(e:Event = null):void{								if(_oSTAGE==null)					Errors.throwError(new Error('Stage reference is undefined'));								trc('onExecute ::: '+_oSTAGE);				_oSTAGE.addEventListener(Event.ENTER_FRAME , _onFrame ,	 false , 100000 , false);								onComplete();							}			/**			* 			* @param			* @return			*/			override final public function onCancel(e:Event = null):void{				trc('onCancel');				_oSTAGE.removeEventListener(Event.ENTER_FRAME, _onFrame , true);							}						/**			* 			* @param			* @return			*/			static public function getInstance():StageEnterFrame{				if(__instance==null)					__instance = new StageEnterFrame();								return __instance;			}					// -------o private						/**			* 			* @param			* @return			*/			protected function __register(o:IFrameable):void{				//trc('register :::'+o);				__oDICO[o] = o;								}						/**			* 			* @param			* @return			*/			protected function __unregister(o:IFrameable):void{				delete __oDICO[o];			}						/**			* 			*			* @param 			* @return			*/			protected function _onFrame(e:Event) : void {				//trc('onFrame');				var o:*;				for each(o in __oDICO)					o.onFrame(e);							}											// -------o misc			public static function trc(arguments:*) : void {				Logger.log(StageEnterFrame,arguments);			}	}}