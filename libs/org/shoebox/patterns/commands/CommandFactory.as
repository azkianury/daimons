package org.shoebox.patterns.commands {	import flash.utils.Dictionary;			import org.shoebox.errors.Errors;	import org.shoebox.utils.logger.Logger;		import flash.errors.IllegalOperationError;		/**	*	* org.shoebox.patterns.commands.CommandFactory	* @date:5 fÃ©vr. 09	* @author shoe[box]	*/	public class CommandFactory{				protected static var _oDICO 	: Dictionary = new Dictionary();				// -------o constructor			/**			* 			* @param			* @return			*/			public function CommandFactory(){				throw new IllegalOperationError(Errors.STATICCLASSERROR);			}					// -------o public						/**			* Register a command in the factory			* @param 	c	: Command class	(CLASS)			* @param	arg 	: optional arguments to be passed to the command constructor	(*)			* @return	command instance (IMPLEMENTS ICOMMAND)			*/			static public function registerCommand(c:Class , ...arg):ICommand{								if(_oDICO[c]==null)					if(arg.length > 0)						_oDICO[c] = new c(arg[0]);					else						_oDICO[c] = new c();									return _oDICO[c];								}						/**			* Retrieve a command			* @param 	c	: Command class	(CLASS)			* @return	command instance (IMPLEMENTS ICOMMAND)			*/			static public function getCommand(c:Class):*{								if(_oDICO[c]==null)					throw new IllegalOperationError('Canot call an unregister command');				else					return _oDICO[c];								}					// -------o private					// -------o misc			public static function trc(arguments:*) : void {				Logger.log(CommandFactory,arguments);			}	}}