package org.shoebox.patterns.mvc.abstracts {	import org.shoebox.errors.Errors;	import org.shoebox.patterns.frontcontroller.FrontController;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.utils.AbstractValidation;	import flash.display.MovieClip;	import flash.events.Event;	/**	 * ABSTRACT VIEW (MVC PACKAGE)	* Responsabilities:	* 	*	===> The view receive update notification from the model	* 		* 	===> The view can be modified by the controller	* 		* 	===> The view send input events to the controller	* 		* 	===> The view store the model instance and the controller instance	* 		* org.shoebox.patterns.mvc2.controller.AView	* @date:26 janv. 09	* @author shoe[box]	*/	public class AView extends MovieClip implements IView{				public var model				: AModel;		public var appContainer		: MovieClip;		public var frontController		: FrontController;						protected var _oController		: AController;		protected var _oAPPLICATION		: AApplication;				// -------o constructor						/**			* 			* @param			* @return			*/			public function AView():void{				AbstractValidation.validate(AView,this);			}							// -------o public									/**			* 			* @param			* @return			*/			public function initialize():void{				throw new Error(Errors.DONOTHING);			}						/**			* 			* @param			* @return			*/			public function update(e:UpdateEvent = null):void{				throw new Error(Errors.DONOTHING);			}						/**			* 			* @param			* @return			*/			public function cancel(e:Event = null):void{				throw new Error(Errors.DONOTHING);			}						/**			* 			* @param			* @return			*/			public function get controller():AController{				return _oController;			}						/**			* 			* @param			* @return			*/			public function set controller(o:AController):void{				_oController = o;			}							/**			* Get the application instance			* @return Application instance (AAplication)			*/			public function get app() : AApplication {				return _oAPPLICATION;			}						/**			* Set the application instance			* @param o:Application instance (AAplication)			* @return void			*/			public function set app(o : AApplication) : void {				_oAPPLICATION = o;			}						/**			* runApp function			* @public			* @param 			* @return			*/			public function startUp() : void {						}					// -------o private					// -------o misc			public static function trc(arguments:*) : void {				//Logger.log(AView,arguments);			}	}}