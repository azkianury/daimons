/**  HomeMade by shoe[box]  IN THE BOX PACKAGE (http://code.google.com/p/inthebox/)     Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.core {	import org.shoebox.errors.Errors;	import org.shoebox.utils.logger.Logger;	import flash.geom.Point;	import flash.geom.Vector3D;	/**	 *	* org.shoebox.core.BoxMath	* @date:19 f√©vr. 09	* @author shoe[box]	*/	public class BoxMath{				// -------o constructor			/**			* contructor			* @return void			*/			public function BoxMath():void{				throw new Error(Errors.STATICCLASSERROR);			}		// -------o public						/**
			* distance function
			* @public
			* @param 
			* @return
			*/
			static public function distance( x1 : int , y1 : int , x2 : int , y2 : int ) : int {								var dx : int = Math.abs( x1 - x2 );				var dy : int = Math.abs( y1 - y2 );				return Math.sqrt( dx * dx + dy * dy );
			}						/**			* toString function			* @public			* @param 			* @return			*/			static public function toString( u : uint , c : uint = 0 ) : String {				var s : String = u.toFixed(c);				if(s.indexOf('.')){					var a : Array = s.split('.');					return a[1]+a[0];				}else					return s; 			}						/**
			* toIndice function
			* @public
			* @param 
			* @return
			*/
			static public function toIndice( u : uint , n : uint ) : String {
								var s : String='';				var i : uint = 0;				for( i ; i < n ; i++)					s+='0';								return ( s + u).substr(-n, n);			
			}			 			/**			* vector3DtoAngle function			* @public			* @param 			* @return			*/			static public function vector3DtoAngle( v : Vector3D) : Number {				return radtodeg(Math.atan2(v.y, v.x));			}			 			/**			* Round the provided number to x number after 0 			* @param	i : input number to be rounded	(Number)			* @param	n : x number after 0			(uint)			* @return	rounded number				(Number)			*/			static public function toDIGIT(i:Number , n:uint):Number{				var iTMP:uint = Math.pow(10,n);				return Math.round(i*iTMP)/iTMP;			}			 			/**			* rignAnglePoint function			* @public			* @param 			* @return			*/			static public function rignAnglePoint(p1:Point , p2:Point , p3:Point , nDistance:Number , iNorm:int = 0) : Point {								var 	pNORMAL:Point = new Point(p1.x - p2.x , p1.y - p2.y);					pNORMAL.normalize(1);									if(iNorm==0)					pNORMAL.x = -pNORMAL.x;				else					pNORMAL.y = -pNORMAL.y;									var 	pNORMAL1:Point = new Point(pNORMAL.y , pNORMAL.x);												p3.x = p3.x + pNORMAL1.x * nDistance;				p3.y = p3.y + pNORMAL1.y * nDistance;				return p3;			}			 			/**			* Convert a degree angle to radian			* @param	i : Degree number (Number)			* @return	Radian number	(Number)			*/			static public function degtorad(i:Number):Number{				return i*Math.PI/180;			}						/**			* Convert radian to degree			* @param	i : Radian number (Number)			* @return	Degree angle	(Number)			*/			static public function radtodeg(i:Number):Number{				return i * 180/Math.PI;			}						/**			* 			*			* @param 			* @return			*/			static public function memorySize(i:Number) : String {								if(i > 1024)					return toDIGIT(i/1024,1)+'Ko';				else if(i > (1024*1024))					return toDIGIT(i/(1024*1024),1)+'Mo';				else					return toDIGIT(i,1)+'o';			}						/**			* pointIntersection function			* @public			* @param 			* @return			*/			static public function pointIntersection( p1 : Point , p2 : Point , p3 : Point , p4 : Point ) : Point {								var x1:Number = p1.x;				var x2:Number = p2.x;				var x3:Number = p3.x;				var x4:Number = p4.x;								var y1:Number = p1.y;				var y2:Number = p2.y;				var y3:Number = p3.y;				var y4:Number = p4.y;								var d:Number =  ( y4 - y3 ) * (x2 - x1 ) - ( x4 - x3 ) * ( y2 - y1 );								var ua:Number = (( x4 - x3 ) * ( y1 - y3 ) - ( y4 - y3 ) * ( x1 - x3 ) ) / d;				var ub:Number = (( x2 - x1 ) * ( y1 - y3 ) - ( y2 - y1 ) * ( x1 - x3 ) ) / d;								return new Point( x1 + ua * ( x2 - x1 ), y1 + ua * ( y2 - y1 ) );											}					// -------o private		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(BoxMath,arguments);			}	}}