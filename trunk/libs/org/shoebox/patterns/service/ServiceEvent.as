/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.patterns.service {	import org.shoebox.core.BoxObject;
	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	/**	 * org.shoebox.patterns.service.ServiceEvent	* @author shoebox	*/	public class ServiceEvent extends Event{				public static const ON_DATAS		:String = 'ON_DATAS';		public static const ON_REFRESH	:String = 'ON_REFRESH';		public static const ON_TIMEOUT		: String = 'ON_TIMEOUT';				protected var _oDATAS		:*;		protected var _bCACHE		:Boolean;		protected var _sDATATYPE	:String;		protected var _sNAME		:String;				// -------o constructor					public function ServiceEvent( sTYPE : String ) : void {				super(sTYPE);			}		// -------o public						/**			* set name function			* @public			* @param 			* @return			*/			public function set name( s : String ) : void {				_sNAME = s;			}						/**			* get name function			* @public			* @param 			* @return			*/			public function get name() : String {				return _sNAME;			}						/**			* set useCache function			* @public			* @param 			* @return			*/			public function set useCache( b : Boolean ) : void {				_bCACHE = b;			}						/**			* get useCache function			* @public			* @param 			* @return			*/			public function get useCache() : Boolean {				return _bCACHE;			}						/**			* set dataType function			* @public			* @param 			* @return			*/			public function set dataType( s : String ) : void {				_sDATATYPE = s;			}						/**			* get dataType function			* @public			* @param 			* @return			*/			public function get dataType() : String {				return _sDATATYPE;			}						/**			* set datas function			* @public			* @param 			* @return			*/			public function set datas( o : * ) : void {				_oDATAS = o;			}						/**			* get datas function			* @public			* @param 			* @return			*/			public function get datas() : * {				return _oDATAS;			}						/**			* clone function			* @public			* @param 			* @return			*/			override public function clone() : Event {				var oCLONE : ServiceEvent = new ServiceEvent( type );				BoxObject.accessorInit(oCLONE, {datas : datas , dataType : dataType , useCache : useCache} );				return oCLONE;			}											// -------o protected		// -------o misc			public static function trc(...args : *) : void {				Logger.log(ServiceEvent, args);			}	}}