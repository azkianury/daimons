/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.patterns.service {	import flash.utils.ByteArray;	import org.shoebox.errors.Errors;	import org.shoebox.utils.relegates.DelayedRelegate;	import org.shoebox.utils.system.Signal;	import flash.events.Event;	import flash.events.TimerEvent;		/**	 * org.shoebox.patterns.service.AbstractService	* @author shoebox	*/	public class AbstractService extends Signal{				protected var _baCached			: ByteArray;		protected var _bCall				: Boolean;		protected var _bUseCaching			: Boolean = false;		protected var _bIsRunning			: Boolean = false;		protected var _rTimeout			: DelayedRelegate;		protected var _iTimeout			: int = -1;		protected var _sDATAFORMAT			: String;				protected const ERROR_ISRUNNING		: String = 'Error, the service is alredy running';				// -------o constructor						public function AbstractService( ) : void {								super();			}		// -------o public						/**			* Call the service			* 			* @public			* @return	if is running 			( Boolean )			*/			public function call() : Boolean {								if(_bIsRunning)					return false;				else{											_bCall = _bIsRunning = true;										( super as IService ).onCall( );										if( _rTimeout )						_rTimeout.execute( );										return true; 				}							}						/**			* Refreshing the services datas			* 			* @public			* @return	is running				( Boolean )			*/			public function refresh() : Boolean {								if(_bIsRunning)					return false;				else{					_bCall = _bIsRunning = true;					( super as IService ).onRefresh( );					return true;				}											}						/**			* Setter of the dataformat			* 			* @public			* @param	s : Response format data		( String ) 			* @return	void			*/			public function set dataFormat( s : String ) : void {				_sDATAFORMAT = s;			}						/**			* Getter of the dataformat			* 			* @public			* @return	response data format			( String )			*/			public function get dataFormat() : String {				return _sDATAFORMAT;			}						/**			* is the service is running ?			* 			* @public			* @return	is running					( Boolean )			*/			final public function get isRunning() : Boolean {				return _bIsRunning;			}						/**			* When the service is complete			* 			* @public			* @return	void			*/			public function onComplete() : void {				_bIsRunning = false;			}						/**			* Dispatch the result by using the actual mode			* 			* @public			* @param	datas 	: Datas to be dispatched		( * )			* @return	void			*/			public function dispatch( oDATAS : * , bUseCache : Boolean = false ) : void {								if( _rTimeout )					if( _rTimeout.isRunning )						_rTimeout.cancel( );									_dispatchResults( oDATAS , bUseCache );							}									/**			* Dispatch the result by using the <code>Signal</code> mode			* 			* @public			* @param	datas 	: Datas to be dispatched		( * )			* @return	void			*/			protected function _dispatchResults( datas : * , b : Boolean = false ) : void {								if( b )					emit( ServiceEvent.ON_DATAS , datas , b );				else					emit( ServiceEvent.ON_DATAS , datas );			}						/**
			* set useCaching function
			* @public
			* @param 
			* @return
			*/
			final public function set useCaching( b : Boolean ) : void {
				_bUseCaching = b;
			}						/**			* set timeoutDelay function			* @public			* @param 			* @return			*/			final public function set timeout( i : int ) : void {				_iTimeout = i;				_rTimeout = new DelayedRelegate( _onTimeout , i, 1 );			}						/**
			* cancel function
			* @public
			* @param 
			* @return
			*/
			public function cancel( ) : void {
				
			}						/**			* get cache function			* @public			* @param 			* @return			*/			final public function get cache() : * {				if( !_baCached )					return null;				else{					_baCached.position = 0;					return _baCached.readObject( );				}			}						/**
			* clearCache function
			* @public
			* @param 
			* @return
			*/
			final public function clearCache() : void {
				_baCached = null;
			}		// -------o protected						/**
			* 
			*
			* @param 
			* @return
			*/
			final protected function _onTimeout( e : TimerEvent ) : void {				if( hasListener( ServiceEvent.ON_TIMEOUT ))					emit( ServiceEvent.ON_TIMEOUT , this );				else{					trace( super );					throw( new Error('Timeout') );				}				_rTimeout.cancel( );				cancel( );			}						/**			* 			*			* @param 			* @return			*/			protected function _onError( e: Event ) : void {				Errors.throwError( e );			}						/**			* 			*			* @param 			* @return			*/			protected function _cache( o : * ) : void {								_baCached = new ByteArray( );				_baCached.writeObject( o );				_baCached.position = 0;							}					// -------o misc			public static function trc(...args : *) : void {				//Logger.log(AbstractService, args);			}	}}