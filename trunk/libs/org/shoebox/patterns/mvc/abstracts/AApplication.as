package org.shoebox.patterns.mvc.abstracts {	import org.shoebox.errors.Errors;	import org.shoebox.patterns.mvc.commands.MVCCommand;	import org.shoebox.utils.AbstractValidation;	import org.shoebox.utils.logger.Logger;		import flash.display.DisplayObjectContainer;	import flash.display.MovieClip;	import flash.events.Event;		/**	 *	* org.shoebox.patterns.mvc.application.AApplication	* @date:26 janv. 09	* @author shoe[box]	*/	public class AApplication extends MovieClip{				protected var _oCOMMAND		:MVCCommand = null;				// -------o constructor			/**			* 			* @param			* @return			*/			public function AApplication():void{				AbstractValidation.validate(AApplication,this);			}			// -------o public						/**			* 			* @param			* @return			*/			public function init(m:Class=null, v:Class=null , c:Class=null , mcContainer:DisplayObjectContainer=null):AApplication{				trc('init ::: '+arguments);								if(mcContainer==null)					Errors.throwError(new ArgumentError('The MVC triad container must not be Null.'));								if(_oCOMMAND!==null)					_oCOMMAND.cancel();									_oCOMMAND = new MVCCommand( m , v , c , mcContainer , null );					_oCOMMAND.execute();										return this;						}						/**			* get model function			* @public			* @param 			* @return			*/			public function get model() : AModel {				return _oCOMMAND.model;			}						/**			* 			* @param			* @return			*/			public function cancel():void{				trc('cancel :::'+_oCOMMAND);				dispatchEvent(new Event(Event.CANCEL , false , true));				_oCOMMAND.cancel();						//_oCOMMAND = null;				}						/**			* 			* @param			* @return			*/			override public function toString():String{				return 'AApplication :::';			}		// -------o private					// -------o misc			public static function trc(arguments:*) : void {				//Logger.log(AApplication,arguments);			}	}}