/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.utils {	import org.shoebox.utils.logger.Logger;	import flash.events.TimerEvent;	import flash.utils.Timer;	import flash.utils.getTimer;		/**	* org.shoebox.utils.PerfectTimer	* @author shoebox	*/	public class PerfectTimer extends Timer{				protected var _dDATE 				: Date;		protected var _nDELAY 				: Number = 0;		protected var _uACCURACY 			: uint = 10;		protected var _uREPEAT_COUNT 			: uint;		protected var _uCURRENT_COUNT 		: uint;				protected var _nTIMER			: Number;				// -------o constructor					/**			* Constructor of the PerfectTimer class			*			* @public			* @return	void			*/			public function PerfectTimer( n : Number , c : int = -1 ) : void {
				_nDELAY = n;				_uREPEAT_COUNT = c;				addEventListener(TimerEvent.TIMER, _onTick , false , 100000 , true);				super(_uACCURACY, 0);			}		// -------o public						/**			* get delay function			* @public			* @param 			* @return			*/			final override public function get delay() : Number {				return _nDELAY;			}						/**			* set delay function			* @public			* @param 			* @return			*/			override public function set delay( n : Number ) : void {				_nDELAY = n;				super.delay = n;			}				/**			* get currentCount function			* @public			* @param 			* @return			*/			override public function get currentCount() : int {				return _uCURRENT_COUNT;			}				/**			* get repeatCount function			* @public			* @param 			* @return			*/			override public function get repeatCount() : int {				return _uREPEAT_COUNT;			}				/**			* set repeatCount function			* @public			* @param 			* @return			*/			override public function set repeatCount( value : int ) : void {				_uREPEAT_COUNT = value;			}				/**			* get accuracy function			* @public			* @param 			* @return			*/			public function get accuracy() : uint {				return _uACCURACY;			}				/**			* set accuracy function			* @public			* @param 			* @return			*/			public function set accuracy( value : uint ) : void {				_uACCURACY = value;			}						/**			* Starting the timer			* 			* @public			* @return	void			*/			final override public function start() : void {				_dDATE = new Date();				_nTIMER = getTimer();				super.start();			}				/**			* Stopping the timer			* 			* @public			* @return	void			*/			final override public function stop() : void {				super.stop();			}						/**			* Reset the timer			* 			* @public			* @return	void			*/			final override public function reset() : void {				_uREPEAT_COUNT = 0;				_uCURRENT_COUNT = 0;				super.reset();			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			final protected function _onTick( e : TimerEvent ) : void {								var nTIMER : Number = getTimer();   							if ( ( nTIMER > _nTIMER ) || ( _nTIMER - nTIMER < _uACCURACY / 2 ) || ( nTIMER == _nTIMER ) ) {					_nTIMER = _nTIMER + _nDELAY;	    					    									if ( 0 < _uREPEAT_COUNT ) {	     						_uCURRENT_COUNT = _uCURRENT_COUNT + 1;	     											if ( _uREPEAT_COUNT == _uCURRENT_COUNT ) {														dispatchEvent(new TimerEvent(TimerEvent.TIMER_COMPLETE));							reset();							e.stopImmediatePropagation();						}					}				} else {					e.stopImmediatePropagation();				}						//evnt.updateAfterEvent();							}					// -------o misc			public static function trc(...args : *) : void {				Logger.log(PerfectTimer, args);			}	}}