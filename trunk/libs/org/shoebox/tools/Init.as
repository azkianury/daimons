/**  HomeMade by shoe[box]  IN THE BOX PACKAGE (http://code.google.com/p/inthebox/)     Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.tools {	import org.shoebox.patterns.service.ServiceEvent;	import org.shoebox.apps.frakconsole.core.Frak;	import org.shoebox.patterns.service.HTTP_Service;	import org.shoebox.utils.display.STAGEINSTANCE;	import org.shoebox.utils.logger.Logger;	import org.shoebox.utils.system.Signal;	import flash.events.Event;	import flash.net.URLRequest;	/**	 * @author shoe[box]	 */	public class Init extends Signal{				public static var currentDomain	: String;		public static var constants	: Object = new Object();		public static var paths		: Object = new Object();				protected static var __instance	:Init;						protected var _oLoader		: HTTP_Service;		protected var _oXML		: XML = new XML();				// -------o constructor			public function Init( e : SingletonEnforcer ){				trc('constructor');			}					// -------o public						/**
			* Running the loading of the init file specified in arguments			* 
			* @public
			* @param 	filePath : File path to the init file ( String )
			* @return	void
			*/
			public function init( filePath : String = null ):void{								if( !filePath )					throw( new ArgumentError('Invalid methods arguments.') );								//					_oLoader = new HTTP_Service( );					_oLoader.request = new URLRequest( filePath );					_oLoader.connect( _onDatas , ServiceEvent.ON_DATAS , 10 , true );					_oLoader.call( );							}						/**			* set datas function			* @public			* @param 			* @return			*/			public function setDatas( s : String ) : void {				_onDatas( s );			}					// -------o private						/**			*			*@return			*/			private function _onDatas( s : String ):void{								_oXML = XML( s );				if( _oLoader ){					_oLoader.dispose();					_oLoader.removeEventListener(Event.COMPLETE , _onDatas , false);					_oLoader = null;				}				_run();			}						/**			* 			*			* @param 			* @return			*/			protected function _run() : void {				_constants();				_domains();				traceInit();								emit( Event.COMPLETE );			}						/**			*			*@return			*/			private function _constants():void{				trc('constants');				for each(var o:XML in _oXML..c)					constants[String(o.@name).toUpperCase()] = o;			}						/**			*			*@return			*/			private function _domains():void{								var 	sURL : String = STAGEINSTANCE.loaderInfo.loaderURL as String;													var i : uint;				var l : uint = _oXML..d.length( );				var s : String;				var o : XML;				for( i ; i < l ; i++ ){										s = _oXML..d[i].@domain;					if( sURL.search( new RegExp( s ,'gi' ) ) !== -1  )						o = _oXML..d[i];										}								if( !o )					o = _oXML..d.( @domain == 'DEFAULT')[0];								currentDomain = o.@domain.toString( );								//					for each(var p:XML in o..path)						paths[String(p.@name).toUpperCase()] = p;								}					// -------o misc						/**			*			*@return			*/			public static function traceInit():void{								var prop:String;								trace('\n');				trace('CONSTANTS LIST');				trace('-------------------------------------\n');				for(prop in constants)					trace('\t'+prop+' == '+constants[prop]);				trace('\n');				trace('PATHS LIST');				trace('-------------------------------------\n');				for(prop in paths)					trace('\t'+prop+' == '+paths[prop]);				trace('\n');			}						/**			*			*@return			*/			public static function trc(arguments:*) : void {				Logger.log(Init,arguments);			}						/**
			* Return the singleton instance of the class
			* @public
			* @return instance of the class (Init)
			*/
			static public function getInstance() : Init {				
				if( !__instance )
					__instance = new Init( new SingletonEnforcer() );
								
				return __instance;
			}	}}internal class SingletonEnforcer{	}