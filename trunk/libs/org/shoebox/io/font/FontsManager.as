/**  HomeMade by shoe[box]  IN THE BOX PACKAGE (http://code.google.com/p/inthebox/)     Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.io.font {	import org.shoebox.events.CustomEvent;	import flash.display.Loader;	import flash.errors.IllegalOperationError;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.ProgressEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.text.Font;	/**	 * @author shoe[box]	 */	public class FontsManager extends EventDispatcher{				protected var _aFonts		:Array = [];		protected var _aFontsName	:Array = [];		protected var _iINC		:int = 0;		protected var _sPATH		:String;				// -------o constructor			public function FontsManager(){}					// -------o public						public function loadLibs(aFonts:Array=null,aFontsName:Array=null , sPATH:String=null):void{				trc('loadLibs ::: '+arguments);				if(_aFonts==null || sPATH==null || _aFontsName==null)					throw(new IllegalOperationError('Arguments must not be null'));								_loadLibs(aFonts,aFontsName,sPATH);			}										// -------o private						/**			*			*@return			*/			protected function _onLibLoaded(e:Event):void{								var oFontDomain : ApplicationDomain = e.target.applicationDomain;				for each(var sFontName:String in _aFonts){					trc(sFontName);					//Font.registerFont(oFontDomain.getDefinition(sFontName) as Class);				}													dispatchEvent(new Event(Event.COMPLETE));						}						/**			*			*@return			*/			protected function _loadLibs(aFonts:Array , aFontsName:Array , sPATH:String):void{				_aFonts = aFonts;				_aFontsName = aFontsName;				_sPATH = sPATH;				_iINC = 0;				_nextFont();			}						/**			*			*@return			*/			protected function _nextFont():void{				trc('--- > '+_sPATH+'font_'+String(_aFonts[_iINC]).toLowerCase()+'.swf')								var 	oContext:LoaderContext = new LoaderContext();								var 	oLoader : Loader = new Loader();					oLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, _onFontLoaded , false, 1 , false);					oLoader.load(new URLRequest(_sPATH+'font_'+String(_aFonts[_iINC]).toLowerCase()+'.swf'),oContext);			}						/**			*			*@return			*/			protected function _onFontLoaded(e:Event = null):void{				e.stopPropagation();				//					trc('_aFontsName > ' + _aFontsName[_iINC]);					var oFontClass:Class = e.target.applicationDomain.getDefinition(_aFontsName[_iINC]) as Class;					Font.registerFont(oFontClass);											//					dispatchEvent(new CustomEvent(ProgressEvent.PROGRESS, false, true,_iINC + 1));								//					_iINC++;					if(_iINC >= _aFonts.length){						FontList.list();						dispatchEvent(new Event(Event.COMPLETE,false,true));					}else						_nextFont();			}		// -------o misc			public static function trc(...arguments):void {				//Logger.log(FontsManager,arguments);			}						public function get current() : int {				return _iINC;			}						public function get total() : int {				return _aFonts.length;			}	}}