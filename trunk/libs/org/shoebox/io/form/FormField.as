/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.io.form {	import org.shoebox.errors.Errors;	import org.shoebox.io.form.abstract.AField;	import org.shoebox.io.form.event.FormEvent;	import org.shoebox.utils.logger.Logger;		import flash.text.TextField;		/**	* org.shoebox.io.form.FormField	* @author shoebox	*/	public class FormField extends AField implements IField{								protected var _oTARGET			:*		= null;		protected var _iMINCHARS		:int		= 0;		protected var _iMAXCHARS		:int		= -1;		protected var _iMINROWS		:int		= 1;		protected var _iMAXROWS		:int		= 1;						// -------o constructor					public function FormField(tgt:* , sNAME:String , oINIT:Object = null) : void {								target = tgt;				name = sNAME;								var prop:String;				if(oINIT!==null)					for(prop in oINIT)						this[prop] = oINIT[prop];			}		// -------o public						/**			* 			*			* @param 			* @return			*/			public function set target(t:*) : void {				_oTARGET = t;			}						/**			* 			*			* @param 			* @return			*/			public function get value() : String{								if(_oTARGET is TextField)					return (_oTARGET as TextField).text;				else					return _oTARGET.value;												}						/**			* 			*			* @param 			* @return			*/			public function validate() : Boolean {				var bRES:Boolean = true;								var f:Function;				for each(f in _aFORMULES){										if(!f(this)){						bRES = false;												if(_bREQUIRED)							dispatchEvent(new FormEvent(FormEvent.ON_ERROR,false,true,this,f));					}				}								if(!_bREQUIRED)					bRES = true;								return bRES;							}						/**			* 			*			* @param 			* @return			*/			public function get field() : TextField {				return _oTARGET as TextField;			}					// -------o protected					// -------o misc			public static function trc(arguments:*) : void {				Logger.log(FormField,arguments);			}						public function get MINChars() : int {				return _iMINCHARS;			}						public function set MINChars(i : int) : void {				_iMINCHARS = i;			}						public function get MAXChars() : uint {				return _iMAXCHARS;			}						public function set MAXChars(i : uint) : void {				_iMAXCHARS = i;			}						public function get MINRows() : int {				return _iMINROWS;			}						public function set MINRows(i : int) : void {				_iMINROWS = i;			}						public function get MAXRows() : int {				return _iMAXROWS;			}						public function set MAXRows(i : int) : void {				_iMAXROWS = i;			}	}}