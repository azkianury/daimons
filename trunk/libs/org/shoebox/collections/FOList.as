package org.shoebox.collections {	import org.shoebox.errors.Errors;	import org.shoebox.utils.logger.Logger;	import flash.events.EventDispatcher;	/**	* First Out list (FIFO or LIFO)	* 	* 	* org.shoebox.collections.FOList	* @date:22 sept. 09	* @author shoe[box]	*/	public class FOList extends EventDispatcher implements ICollection{				public static const FIFO	:String = 'FIFO_Queue';		public static const LIFO	:String = 'LIFO_Queue';				protected var _uINCPOSITION	:int = -1;		protected var _sTYPE		:String;		protected var _uLENGTH		:int = -1;		protected var _vQUEUE		:Array;						// -------o constructor			/**			* contructor			* @param sTYPE	: List type (FIFO or LIFO)			* @param iSIZE	: List size (int)			* @return void			*/			public function FOList(sTYPE:String = FOList.FIFO , iSIZE:int = -1):void{				_sTYPE = sTYPE;				_uLENGTH = iSIZE;				_uINCPOSITION = 0;				clear();			}					// -------o public						/**			* Test if the list is empty			* @public			* @return is Empty boolean (BOOLEAN)			*/			public function get isEmpty():Boolean{				return !(_uLENGTH > -1);			}						/**			* clear the content of the list			* @public			* @return void			*/			final public function clear():void{				if(_uLENGTH!==-1)					_vQUEUE = new Array(_uLENGTH,false);				else					_vQUEUE = new Array();			}						/**			* Test if an object is contains in the list			* @public			* @param	object to test (*)			* @return 	result (Boolean)			*/			final public function contains(value:*):Boolean{								var oFUNC:Function = function(item:QueueItem , iPOS:int , vSOURCE:Array):Boolean{					return (item.value == value);				};								return _vQUEUE.some(oFUNC);			}						/**			* Return the item queue at the specified position			* @public			* @param iPOS : Item position in the queue			* @return item (*)			*/			final public function getValueAt(iPOS:uint):*{				return _vQUEUE[iPOS].value;			}						/**			* Push an item or an array of items in to the queue			* @public			* @param items (Array or unique item)			* @return True is enqueing is successfully completed (Boolean)			*/			final public function addItem(...items : Array):Boolean{								var o:*;				for each(o in items){										if(_uINCPOSITION < _uLENGTH)						_push(o);					else					 	return false;								}				return true;			}						/**			* Returne the length of the list			* @public			* @return length			*/			final public function get length():int{				return _vQUEUE.length;			}						/**			* Get the number of items in the queue			* @public			* @param 			* @return number of items (UINT)			*/			final public function get size():uint{				return _uINCPOSITION;			}						/**			* Remove the next item in the queue (LIFO or FIFO) and return it			* @public			* @return item (*			*/			final public function deQueue():*{								var oITEM:QueueItem;								switch(_sTYPE){										case LIFO:						oITEM = _vQUEUE.pop();						break;											case FIFO:						oITEM = _vQUEUE.shift();						break;				}				_uINCPOSITION--;								if(oITEM==null)					return null;								return oITEM.value;			}					// -------o private						/**			* Pushing an item in to the list			* @protected			* @param	Object to push in the queue (*) 			* @return void			*/			final protected function _push(o:*):void{								switch(_sTYPE){										case LIFO:						_vQUEUE[_uLENGTH - _uINCPOSITION++] = new QueueItem({value:o});						break;											case FIFO:						_vQUEUE[_uINCPOSITION++] = new QueueItem({value:o});						break;									}			}				// -------o misc			public static function trc(arguments:*) : void {				Logger.log(FOList,arguments);			}	}}import org.shoebox.core.BoxObject;import org.shoebox.utils.logger.Logger;/** *	* org.shoebox.collections.Fifo	* @date:22 sept. 09	* @author shoe[box]	*/	final internal class QueueItem{				protected var _oVALUE		:*;				// -------o constructor					/**			* contructor			* @return void			*/			public function QueueItem(oINIT:Object = null):void{				if(oINIT!==null)					BoxObject.accessorInit(this, oINIT);			}					// -------o public						/**			* value setter function			* @public			* @param	value : * 			* @return 	void			*/			final public function set value(val:*):void{				_oVALUE = val;			}						/**			* get value function			* @public			* @param 			* @return *			*/			final public function get value():*{				return _oVALUE;			}					// -------o private		// -------o misc			public static function trc(arguments:*) : void {				//Logger.log(QueueItem,arguments);			}	}