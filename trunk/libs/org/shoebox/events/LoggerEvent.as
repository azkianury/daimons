/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.events {	import flash.utils.getQualifiedClassName;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	/**	* Event used by the logger class to broadcast new Logger Event	* Several level of errors exist @see Logger class	* 	* org.shoebox.events.LoggerEvent	* @author shoebox	*/	public class LoggerEvent extends Event{				public static var LOG_EVENT	:String = 'ONLOGEVENT';				protected var _oFROM		:*;		protected var _aARGUMENTS	:Array;		protected var _uERRORLEVEL	:uint;				// -------o constructor					/**			* constructor function			* @public				* @param 	from 	 : The instance who made the function call 	( * )			* @param 	args 	 : Optional arguments	 				( Array )			* @param 	uLEVEL : Level of the error (@see Logger class)		(uint)			* @return	void 			*/			public function LoggerEvent( from : * , args : Array = null , uLEVEL : uint = 0){				_uERRORLEVEL = uLEVEL;				_oFROM = from;				_aARGUMENTS = args;				super( LOG_EVENT , false , true );			}		// -------o public						/**			* Getter for the from target			* @public				* @return	target for which came the log entry (*)			*/			public function get from() : * {				return _oFROM;			}						/**			* Getter for the arguments list			* @public			* @return the list of arguments (Array)			*/			public function get arguments() : Array {				return _aARGUMENTS;			}						/**			* Getter for the error level			* @public			* @return	error level (uint)			*/			public function get errorLevel() : uint {				return _uERRORLEVEL;			}						/**			* toString function			* @public			* @param 			* @return			*/			final override public function toString() : String {				return getQualifiedClassName(_oFROM)+' ::: ' + _aARGUMENTS.join('/n/t');			}					// -------o protected		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(LoggerEvent,arguments);			}	}}