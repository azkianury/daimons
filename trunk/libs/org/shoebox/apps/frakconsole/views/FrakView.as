/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.apps.frakconsole.views {	import com.greensock.TweenLite;	import org.shoebox.apps.frakconsole.controller.FrakController;	import org.shoebox.apps.frakconsole.core.Frak;	import org.shoebox.display.DisplayFuncs;	import org.shoebox.patterns.commands.samples.IResizeable;	import org.shoebox.patterns.commands.samples.IStageable;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.patterns.factory.Factory;	import org.shoebox.patterns.mvc.abstracts.AView;	import org.shoebox.patterns.mvc.events.UpdateEvent;	import org.shoebox.patterns.mvc.interfaces.IView;	import org.shoebox.transitions.Equations;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.events.KeyboardEvent;	import flash.events.TimerEvent;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFieldType;	import flash.text.TextFormat;	import flash.utils.Timer;	/**	 * org.shoebox.apps.frakconsole.views.FrakView	* @author shoebox	*/	public class FrakView extends AView implements IView , IStageable , IResizeable{				public var tfIN				: TextField;		public const HEIGHT			: uint = 100;				protected var _spOPTIONS		: Sprite;		protected var _bOPEN			: Boolean = false;		protected var _shBACK			: Shape;		protected var _tfOUT			: TextField;		protected var _tfWatch			: TextField;		protected var _oTimer			: Timer;				// -------o constructor					public function FrakView() : void {				StageResize.register(this);				y = -HEIGHT;				addEventListener( Event.ADDED_TO_STAGE , onStaged , false , 10 , true );			}		// -------o public						/**			* initialize function			* @public			* @param 			* @return			*/			final override public function initialize() : void {						}						/**			* get command function			* @public			* @param 			* @return			*/			public function get command() : String {				return tfIN.text;			}						/**			* clear function			* @public			* @param 			* @return			*/			public function clear() : void {				tfIN.text = '';			}						/**			* update function			* @public			* @param 			* @return			*/			override final public function update(o:UpdateEvent = null) : void {						}												/**			* cancel function			* @public			* @param 			* @return			*/			override final public function cancel(e:Event = null) : void {												}						/**			* onResize function			* @public			* @param 			* @return			*/			public function onStaged(e:Event = null) : void {				removeEventListener( Event.ADDED_TO_STAGE , onStaged , false );				trc('onStaged');						(controller as FrakController).init( );				_gfx();				_input();					_output();				onResize();								//var s : String = ' .d888                 888      \n888                    888      \n888888 888d888 8888b.  888  888 \n888    888P"      "88b 888 .88P \n888    888    .d888888 888888K  \n888    888    888  888 888 "88b \n888    888    "Y888888 888  888 \n';								//log(s,false);				log('Waiting for input...' , true );				log('' , true );			}									/**			* onRemoved function			* @public			* @param 			* @return			*/			public function onRemoved(e:Event = null) : void {												}						/**			* onResize function			* @public			* @param 			* @return			*/			public function onResize( e : Event = null) : void {				trc('onResize');				_shBACK.width = stage.stageWidth;				tfIN.width = _tfOUT.width = stage.stageWidth - 20;			}						/**			* log function			* @public			* @param 			* @return			*/			public function log( s : String , bHL : Boolean = false) : void {				if(bHL)					_tfOUT.htmlText+='<font color="#FFFFFF"><b>' + s + '</b></font><br>';				else					_tfOUT.htmlText+='<font color="#DDDDDD">' + s + '</font><br>';					_tfOUT.scrollV = _tfOUT.maxScrollV;			}						/**			* openclose function			* @public			* @param 			* @return			*/			public function openclose() : void {								autoComplete( );				Frak.getInstance().parent.setChildIndex( Frak.getInstance() , Frak.getInstance().parent.numChildren - 1 );				TweenLite.to(this, .5 , { ease : (!_bOPEN) ? Equations.easeInOutCirc : Equations.easeInCirc , y : (!_bOPEN) ? 0 : -HEIGHT});
				_bOPEN = !_bOPEN;
				if( _bOPEN )					stage.focus = tfIN;									tfIN.text = '';			}						/**
			* drawOptions function
			* @public
			* @param 
			* @return
			*/
			final public function autoComplete( v : Vector.<String> = null ) : void {												DisplayFuncs.purge( _spOPTIONS );								if( v == null )					return;								var s : String;				var oTF : TextField;				var iY : int = 0;				for each( s in v ){										oTF = Factory.build(TextField , {											width : 0 , 											height : 20 ,											x : 10 , y : HEIGHT - 5 + iY++ * 18, 											selectable : false ,											background : true ,											autoSize : TextFieldAutoSize.LEFT ,											backgroundColor : 0x08A6F3 , 											defaultTextFormat : new TextFormat( 'Verdana' , 12 , 0xFFFFFF , false),											htmlText : s											} );					_spOPTIONS.addChild(oTF);				}
			}						/**
			* watchString function
			* @public
			* @param 
			* @return
			*/
			final public function watchString( s : String ) : void {				if( !_tfWatch.visible )					_tfWatch.visible = true;
					_tfWatch.text = s ;								if( !_oTimer )					_oTimer = new Timer( 10000 , 1 );				else					_oTimer.reset( );					_oTimer.addEventListener( TimerEvent.TIMER , _onTimerWatch , false , 10 , true );					_oTimer.start( );
			}		// -------o protected					/**
			* 
			*
			* @param 
			* @return
			*/
			final protected function _onTimerWatch( e : TimerEvent ) : void {				_oTimer.removeEventListener( TimerEvent.TIMER , _onTimerWatch , false );				_tfWatch.visible = false;
			}					/**			* 			*			* @param 			* @return			*/			protected function _gfx() : void {				_shBACK = new Shape();				_shBACK.graphics.beginFill(0x282828);				_shBACK.graphics.drawRect(0 , 0 , 100 , HEIGHT);				_shBACK.graphics.endFill();				addChild(_shBACK);			}					/**			* 			*			* @param 			* @return			*/			protected function _input() : void {				tfIN = Factory.build(TextField , {										width : stage.stageWidth , 										height : 20 ,										border : true, 										x : 10 , y : HEIGHT - 30 , 										type :TextFieldType.INPUT ,										selectable : true ,										borderColor : 0x08A6F3 , 										background : true ,										autoSize : TextFieldAutoSize.NONE ,										backgroundColor : 0x000000 , 										defaultTextFormat : new TextFormat( 'Verdana' , 12 , 0xFFFFFF , false) //,										} );				addChild(tfIN);								_spOPTIONS = new Sprite( );				addChild( _spOPTIONS );												controller.register( tfIN , KeyboardEvent.KEY_DOWN , false , 7 , true);				controller.register( tfIN , Event.CHANGE , false , 7 , true);			}			/**			* 			*			* @param 			* @return			*/			protected function _output() : void {								var oFORMAT : TextFormat = new TextFormat('Verdana' , 10 , 0xFFFFFF , false);													_tfOUT = Factory.build(TextField , {										width : stage.stageWidth , 										height : HEIGHT - 40 ,										multiline : true , wordWrap : true ,										autoSize : TextFieldAutoSize.NONE ,										x : 10 , y : 10 , 										defaultTextFormat : oFORMAT										} );				addChild(_tfOUT);								_tfWatch = Factory.build(TextField , {										width : 10 , 										height : 20 ,										x : 10 , y : HEIGHT + 5 , 										type :TextFieldType.DYNAMIC ,										selectable : false ,										defaultTextFormat : new TextFormat( 'Verdana' , 11 , 0xFFFFFF , true ) ,										background : true,										multiline : false,										text : '',										autoSize : TextFieldAutoSize.LEFT,										backgroundColor : 0xFF0000,										visible : false										} );				_tfWatch.mouseEnabled = false;				addChild(_tfWatch);							}		// -------o misc			public static function trc(arguments:*) : void {				//Logger.log(FrakView,arguments);			}	}}