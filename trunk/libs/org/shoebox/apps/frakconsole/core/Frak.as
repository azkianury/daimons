/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.apps.frakconsole.core {	import org.shoebox.apps.frakconsole.controller.FrakController;	import org.shoebox.apps.frakconsole.model.FrakModel;	import org.shoebox.apps.frakconsole.views.FrakView;	import org.shoebox.patterns.mvc.abstracts.AApplication;	import org.shoebox.utils.logger.Logger;	import flash.events.Event;	import flash.events.IEventDispatcher;	/**	 * The frak console is an quake like game console	* Permit to execute command, modify variables...	*  	* org.shoebox.apps.frakconsole.core.Frak	* @author shoebox	*/	public class Frak extends AApplication {				protected static var __instance	:Frak = null ;				// -------o constructor					/**			* Constructor			* @public			* @return void			*/			public function Frak( e : SingletonEnforcer ) : void {				__instance = this;				addEventListener( Event.ADDED_TO_STAGE , onStaged , false , 10 , true );			}		// -------o public						/**			* getInstance function			* @public			* @param 			* @return			*/			static public function getInstance() : Frak {								if(__instance == null)					__instance = new Frak( new SingletonEnforcer() );									return __instance;								}						/**			* When the console is added to the staged			* 			* @see StageCommand			* @public			* @param 	e : added to stage event (Event) 			* @return	void			*/			public function onStaged(e:Event = null) : void {				removeEventListener( Event.ADDED_TO_STAGE , onStaged , false );				init(FrakModel , FrakView , FrakController , this);			}									/**			* When the frak console is removed from the stage			* @see StageCommand			* @public			* @param 	e : removed from stage event (Event)			* @return	void			*/			public function onRemoved(e:Event = null) : void {												}						/**			* open function			* @public			* @param 			* @return			*/			final public function open() : void {				(model as FrakModel).open();			}						/**			* Register an variable to the console			* @public			* @param 			* @return			*/			static public function registerVar( sVARNAME : String , tgt : *) : void {				(getInstance().model as FrakModel).registerVar (sVARNAME , tgt);			}						/**			* Unregister an variable to the console			* @public			* @param 			* @return			*/			static public function unRegisterVar( sVARNAME : String , tgt : *) : void {				(getInstance().model as FrakModel).unRegisterVar (sVARNAME , tgt);			}						/**			* registerCommand function			* @public			* @param 			* @return			*/			static public function registerCommand( sCOMNAME : String , oFUNC : Function , sHELP : String ) : void {				(getInstance().model as FrakModel).registerCommand( sCOMNAME , oFUNC , sHELP);			}						/**			* log function			* @public			* @param 			* @return			*/			static public function log( s : String ) : void {				(getInstance().model as FrakModel).log( s );			}						/**
			* watch function
			* @public
			* @param 
			* @return
			*/
			static public function watch( s : String ) : void {
				(getInstance().model as FrakModel).watch( s );
			}					// -------o protected		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(Frak,arguments);			}	}}internal class SingletonEnforcer{}