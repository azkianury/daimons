/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.display {	import org.shoebox.display.containers.BoxGrid;	import org.shoebox.display.containers.BoxGridCell;	import org.shoebox.patterns.commands.samples.IResizeable;	import org.shoebox.patterns.commands.samples.IStageable;	import org.shoebox.patterns.commands.samples.StageResize;	import org.shoebox.utils.logger.Logger;	import flash.display.Shape;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Rectangle;	/**	 * org.shoebox.display.BoxPopup	* @author shoebox	*/	public class BoxPopup extends Sprite implements IStageable , IResizeable{				protected var _oGRID		:BoxGrid;		protected var _uWIDTH		:uint = 400;		protected var _uINNERMARGIN	:uint = 10;		protected var _oXML		:XML;					// -------o constructor					public function BoxPopup() : void {				trc('constructor');				StageResize.register(this);			}		// -------o public						/**			* set witdth function			* @public			* @param 			* @return			*/			public function set witdth( w : uint ) : void {				_uWIDTH = w;			}						/**			* set innerMargin function			* @public			* @param 			* @return			*/			public function set innerMargin( u : uint) : void {				_uINNERMARGIN = u;			}						/**			* set content function			* @public			* @param 			* @return			*/			public function set content(o:XML) : void {				_oXML = o;			}						/**			* onResize function			* @public			* @param 			* @return			*/			public function onStaged(e:Event = null) : void {				_draw();						}									/**			* onRemoved function			* @public			* @param 			* @return			*/			public function onRemoved(e:Event = null) : void {												}						/**			* onResize function			* @public			* @param 			* @return			*/			public function onResize( e : Event = null ) : void {				trc('onResize');				DisplayFuncs.align(this , new Rectangle( 0 , 0 , stage.stageWidth , stage.stageHeight));			}					// -------o protected					/**			* 			*			* @param 			* @return			*/			protected function _draw() : void {				trc('draw');								var 	oBACK	: Shape = new Shape();					oBACK.graphics.beginFill(0x282828);					oBACK.graphics.drawRect(0, 0, _uWIDTH , 100);				addChild(oBACK);								var oCELL 	: BoxGridCell;				var uLEN 	: uint = _oXML..item.length() - 1;				var oITEM 	: PopupItem;								// Grid initialization					_oGRID = new BoxGrid(1 , uLEN + 2, _uINNERMARGIN);					_oGRID.y = _uINNERMARGIN;					addChild(_oGRID);												// Filling the grid					var i:int = -1;					while( i++ < uLEN){												oITEM = new PopupItem();						oITEM.datas = _oXML..item[i];						oITEM.width = _uWIDTH;						oITEM.innerMargin = _uINNERMARGIN;												oCELL = _oGRID.getCellAt(0, i);						oCELL.addContent(oITEM);												// oCELL.preview();					}									// Invalidation					_oGRID.invalidate();									//					oBACK.height = _oGRID.height + _uINNERMARGIN * 2;									onResize();		}		// -------o misc			public static function trc(arguments:*) : void {				Logger.log(BoxPopup,arguments);			}	}}import org.shoebox.display.items.GenericButton;import org.shoebox.patterns.commands.samples.IStageable;import org.shoebox.patterns.factory.Factory;import org.shoebox.utils.logger.Logger;import flash.display.MovieClip;import flash.events.Event;import flash.text.TextField;import flash.text.TextFieldAutoSize;import flash.text.TextFieldType;import flash.text.TextFormat;/** * org.shoebox.display.PopupItem	* @author shoebox	*/	class PopupItem extends MovieClip implements IStageable{				protected var _uINNERMARGIN	:uint;		protected var _uWIDTH		:uint;		protected var _oXML		:XML;					// -------o constructor					public function PopupItem() : void {				trc('constructor');			}		// -------o public						/**			* set innerMargin function			* @public			* @param 			* @return			*/			public function set innerMargin( u :uint) : void {				_uINNERMARGIN = u;			}						/**			* set datas function			* @public			* @param 			* @return			*/			public function set datas( o : XML ) : void {				_oXML = o;			}						/**			* onResize function			* @public			* @param 			* @return			*/			public function onStaged(e:Event = null) : void {				_draw();				}									/**			* onRemoved function			* @public			* @param 			* @return			*/			public function onRemoved(e:Event = null) : void {												}						/**			* set width function			* @public			* @param 			* @return			*/			override public function set width( u : Number) : void {				_uWIDTH = u;			}					// -------o protected						/**			* 			*			* @param 			* @return			*/			protected function _draw() : void {				//trc('draw '+_oXML.@type);								var uWIDTH : uint = _uWIDTH - _uINNERMARGIN * 2;								switch(String( _oXML.@type )){										case 'title':						addChild(Factory.build(TextField , { 	width : uWIDTH ,													height : 30 ,													backgroundColor : 0x08A6F3 ,													background : true , 													mouseEnabled : false ,													text : _oXML.@text , 													autoSize : TextFieldAutoSize.LEFT , 													multiline : true , wordWrap : true , selectable : false , 													defaultTextFormat : new TextFormat( 'Verdana' , 14 , 0xFFFFFF ,true , false , false , null , null , null , 5 , 5 )												}));						break;										case 'label':											trc('addLabel');						addChild(Factory.build(TextField , { 	width : uWIDTH ,													mouseEnabled : false ,													border : false ,													text : _oXML.@text , 													autoSize : TextFieldAutoSize.LEFT , 													multiline : true , wordWrap : true , selectable : false , 													defaultTextFormat : new TextFormat( 'Verdana' , 11 , 0xFFFFFF , false )												}));						break;											case 'field':						addChild(Factory.build(TextField , { 														defaultTextFormat : new TextFormat( 'Verdana' , 11 , 0xFFFFFF , false ) ,													name : _oXML.@id ,													width : uWIDTH ,													border : true , 													borderColor : 0xA1A1A1 ,													textColor : 0xFFFFFF ,													type : TextFieldType.INPUT ,													text : _oXML.@defaultText , 													height : 20 ,													multiline : false , wordWrap : false , selectable : true												}));																		break;											case 'button':						addChild(Factory.build(GenericButton , { text : _oXML.@text }));						break;									}							}					// -------o misc			public static function trc(arguments:*) : void {				Logger.log(PopupItem,arguments);			}	}