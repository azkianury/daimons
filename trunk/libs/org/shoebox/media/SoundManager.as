/**  HomeMade by shoe[box]   Redistribution and use in source and binary forms, with or without   modification, are permitted provided that the following conditions are  met:  * Redistributions of source code must retain the above copyright notice,     this list of conditions and the following disclaimer.    * Redistributions in binary form must reproduce the above copyright    notice, this list of conditions and the following disclaimer in the     documentation and/or other materials provided with the distribution.    * Neither the name of shoe[box] nor the names of its     contributors may be used to endorse or promote products derived from     this software without specific prior written permission.  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS  IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR  PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF  LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS  SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.*/package org.shoebox.media {	import flash.errors.IllegalOperationError;	import org.shoebox.apps.frakconsole.core.Frak;
	import org.shoebox.errors.Errors;	import org.shoebox.media.SoundTrack;	import org.shoebox.utils.logger.Logger;	import flash.media.SoundTransform;	import flash.utils.Dictionary;	/**	 * org.shoebox.media.SoundManager	* @author shoebox	*/	public class SoundManager {				protected static var __initialized		: Boolean = false;		protected static var _oTracksDico		: Dictionary = new Dictionary(true);		protected static var __instance			: SoundManager = null;				// -------o constructor					public function SoundManager( e : SingletonEnforcer ) : void {							}		// -------o public						/**			* addTrack function			* @public			* @param 			* @return			*/			static public function addTrack( sID : String , oST : SoundTransform = null ) : SoundTrack {
				if( !__initialized )					_init();									if( _oTracksDico[ sID ] !== undefined){					throw new ArgumentError( 'A soundtrack with that ID already exist' );					return _oTracksDico[ sID ];				}								var oTRACK : SoundTrack = new SoundTrack( sID , oST );				_oTracksDico[ sID ] = oTRACK;								return oTRACK;			}						/**			* getTrack function			* @public			* @param 			* @return			*/			static public function getTrack( sTRACKID : String ) : SoundTrack {				if(_oTracksDico[ sTRACKID ]== undefined){					//Logger.warn( SoundManager , 'Unknow track ID ::: ' + sTRACKID );					return null;				}												return _oTracksDico[ sTRACKID ];			}						/**			* closeTrack function			* @public			* @param 			* @return			*/			static public function closeTrack( sTRACKID : String ) : void {							if( _oTracksDico[ sTRACKID ] ){					(_oTracksDico[ sTRACKID ] as SoundTrack).close();					delete _oTracksDico[ sTRACKID ];				}						}						/**			* getInstance function			* @public			* @param 			* @return			*/			static public function getInstance() : SoundManager {								if(__instance == null)					__instance = new SoundManager( new SingletonEnforcer( ) );														return __instance;			}									/**			* 			*			* @param 			* @return			*/			static public function setTrackVolume( s : String , u : uint ) : void {				(_oTracksDico[ s ] as SoundTrack).setTrackVolume( u );			}						// -------o protected						/**			* 			*			* @param 			* @return			*/			static  protected function _init() : void {				//Frak.registerCommand( 'tracks' , _listTrack , 'List the currents soundtrack(s) name(s)' );				//Frak.registerCommand( 'trackVolume' , setTrackVolume , 'Set the volume of the specified track (1-100)' );				__initialized = true;			}						/**			* 			*			* @param 			* @return			*/			static protected function _listTrack() : void {				var prop : String;				Frak.log( 'Track(s) list' );				for( prop in _oTracksDico )					Frak.log( '\t '+prop );								}								// -------o misc			public static function trc(arguments : *) : void {				Logger.log(SoundManager, arguments);			}	}}internal class SingletonEnforcer{	}